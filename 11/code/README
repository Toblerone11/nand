ronlik, toblerone
===============================================================================
Ron Pick, 		ID 301643334, ron.pick@mail.huji.ac.il
Ron Likvornik, 	ID 302574694 ron.likvornik@mail.huji.ac.il
===============================================================================

                           Project 11 - Jack Compiler
                           ----------------------------------
  

Submitted Files
---------------
Main.java				- parsing the path and execute the code.

ComiplerEngine.java	- Top down CFG parser. compiles the code and generate xml as the code structure.

SyntaxException.java	- used basically to debug the program, and can detec illegal jack source code.


package: tokenizer
------------------
JackTokenizer.java		- separating all token in the code into the basic tokens.


package: tokenizer.constants
---------------------------
JavkConstants.java		- global constants used by the tokenizer and the compilerEngine.

TokenType.java				- global enum for the possible tokenTypes. used by the tokenizer and the
						  CompilerEngine.

package: vmproduce
-------------------
					  
vmFileOrgnizer.java	- wraps the VM file and write it in the correct structure.

SymbolTable.java	- manages the variables of all kinds: of the class and subroutines. responsible
					- to attach a special index to any of them.
					
VmConstants.java	- common constants used by the CompilerEngine and by the VMWriter.

VMWriter.java		- used by the compiler engine to produce a vm file. this class knows how to
					  build the the given command in the correct structure.
=================

README			- this file.

Remarks
-------
* The design is as follows:
	- The compilerEngine gets the token directly from the tokenizer and encasulates the context free
	  rules as recursive methods. the only method which needed to be activated from outside the class
	  is the 'compileClass' method, and the constructor ofcourse.
	  
	- the tokenizer based on regex where all tokenes are prefix free, meaning, when we start parsing
	from the beginning we always know what should be the next token only by the ofirst characters of
	the next string available from the source code.
