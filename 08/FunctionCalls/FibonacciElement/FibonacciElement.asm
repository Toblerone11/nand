@256
D=A
@0
M=D
@Return_1
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@1
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@2
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@3
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@4
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@5
D=A
@0
A=M-D
D=A
@2
M=D
@0
D=M
@1
M=D
@Sys.init
0;JMP
(Return_1)
@END
0;JMP

// function Main.fibonacci 0
(Main.fibonacci)

// push argument 0
@2
D=M
@0
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1

// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1

// lt                     
@0
M=M-1
@0
A=M
D=M
@0
M=M-1
@0
A=M
D=M-D
@Condition_1
D;JLT
D=0
@Continue_1
0;JMP
(Condition_1)
D=-1
(Continue_1)
@0
A=M
M=D
@0
M=M+1

// if-goto IF_TRUE
@0
M=M-1
A=M
D=M
@Main$IF_TRUE
D;JNE

// goto IF_FALSE
@Main$IF_FALSE
0;JMP

// label IF_TRUE          
(Main$IF_TRUE)

// push argument 0
@2
D=M
@0
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1

// return
@1
D=M
@frame
M=D
@2
D=M+1
@spRetAddr
M=D
@5
D=A
@1
A=M-D
D=M
@returnValue
M=D
@0
M=M-1
@2
D=M
@0
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@frame
D=M
@0
M=D
@0
M=M-1
@0
D=A
@4
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@3
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@2
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@1
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@spRetAddr
D=M
@0
M=D
@returnValue
A=M
0;JMP

// label IF_FALSE         
(Main$IF_FALSE)

// push argument 0
@2
D=M
@0
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1

// push constant 2
@2
D=A
@0
A=M
M=D
@0
M=M+1

// sub
@0
M=M-1
@0
A=M
D=M
@0
M=M-1
@0
A=M
D=M-D
@0
A=M
M=D
@0
M=M+1

// call Main.fibonacci 1  
@Return_2
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@1
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@2
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@3
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@4
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@6
D=A
@0
A=M-D
D=A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Return_2)

// push argument 0
@2
D=M
@0
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1

// push constant 1
@1
D=A
@0
A=M
M=D
@0
M=M+1

// sub
@0
M=M-1
@0
A=M
D=M
@0
M=M-1
@0
A=M
D=M-D
@0
A=M
M=D
@0
M=M+1

// call Main.fibonacci 1  
@Return_3
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@1
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@2
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@3
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@4
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@6
D=A
@0
A=M-D
D=A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Return_3)

// add                    
@0
M=M-1
@0
A=M
D=M
@0
M=M-1
@0
A=M
D=D+M
@0
A=M
M=D
@0
M=M+1

// return
@1
D=M
@frame
M=D
@2
D=M+1
@spRetAddr
M=D
@5
D=A
@1
A=M-D
D=M
@returnValue
M=D
@0
M=M-1
@2
D=M
@0
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@frame
D=M
@0
M=D
@0
M=M-1
@0
D=A
@4
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@3
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@2
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@0
M=M-1
@0
D=A
@1
A=A+D
D=A
@popAddr
M=D
@0
A=M
D=M
@popAddr
A=M
M=D
@spRetAddr
D=M
@0
M=D
@returnValue
A=M
0;JMP

// function Sys.init 0
(Sys.init)

// push constant 4
@4
D=A
@0
A=M
M=D
@0
M=M+1

// call Main.fibonacci 1   
@Return_4
D=A
@0
A=M
M=D
@0
M=M+1
@0
D=A
@1
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@2
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@3
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@0
D=A
@4
A=A+D
D=M
@0
A=M
M=D
@0
M=M+1
@6
D=A
@0
A=M-D
D=A
@2
M=D
@0
D=M
@1
M=D
@Main.fibonacci
0;JMP
(Return_4)

// label WHILE
(Sys$WHILE)

// goto WHILE              
@Sys$WHILE
0;JMP
(END)
@END
0;JMP
