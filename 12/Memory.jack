// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {

	static int heapBaseAddr;
	static int heapSize;
	static Array firstFreeAddress;
	
    /** Initializes memory parameters. */
    function void init() {
		let heapBaseAddr = 2048;
		let heapSize = 14335;
	    let firstFreeAddress = heapBaseAddr + 2;
	    let firstFreeAddress[0] = heapSize;
		let firstFreeAddress[1] = null;
		return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
	    var Array mem_seg;    // memory segment
		let mem_seg = address;
	    return mem_seg[0]; 
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
	    var Array mem_seg;    // memory segment
		let mem_seg = address;
		let mem_seg[0] = value;
		return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
	    /* implements the 'best-fit' algorithm */
	    var int best_addr;
		var int best_size;
		var int best_prev;
		var int curr_addr;
		var int curr_size;
		var int curr_prev;
		
		var int new_addr;
		var int new_size;
		
		if (~(firstFreeAddress > null)) {
		    // raise an error for not found memory for allocation.
		}
		
		/* find the best match for free block address. */
		// initialization
		let size = size + 1;
		let curr_addr = firstFreeAddress;
		let curr_prev = firstFreeAddress;
		let best_size = curr_addr[0];
		let best_addr = curr_addr;
		let best_prev = curr_prev;
	    while (curr_addr > 0 ) {
		    let curr_size = curr_addr[0];
		    if (curr_size > size) {
			    if (curr_size < best_size) {
				     let best_size = curr_size;
					 let best_addr = curr_addr;
					 let best_prev = curr_prev;
				}
			}
			let curr_prev = curr_addr;
			let curr_addr = curr_addr[1]; 
		}
		
		if (best_size < size) {
		    do Sys.error(0);
		}
		
		// checks if there is more space in the matched block.
		let new_size = best_size - size;
		if (new_size > 1) {
		    // split the block, and set the new one.
		    let new_addr = best_addr + size;
			let new_addr[1] = best_addr[1];
			let new_addr[0] = new_size;
		}
		else {
		    // reference to next block
		    let new_addr = best_addr[1]; // if this is the very last block - new_addr is null.
		}
		
		// checks if the matched block is the first one.
		if (best_prev < best_addr) {
	        // skip the matched block.
		    let best_prev[1] = new_addr;
		} else {
		    // set 'new_addr' to be the first free block.
			let firstFreeAddress = new_addr;
		}
		
		// store size of allocated memory
		let best_addr[0] = size;
		return best_addr + 1;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
	    var int newBlockAddr;
		var int newBlockSize;
		var int newNextAddr;
		var int currAddr;
		var int prevAddr;
		var bool found;
		
		let currAddr = firstFreeAddress;
		let prevAddr = heapBaseAddr;
		let found = false;
		while ((currAddr > 0) & ~(found)) {
		    if (currAddr > object) {
			    let found = true; // break;
			}
			else {
			    let prevAddr = currAddr;
			    let currAddr = currAddr[1];
			}
		}
		
		let newBlockAddr = object - 1;
		let newBlockSize = newBlockAddr[0]; // size of obj + 1('newBlockAddr' memory slot).
		
		/* check if cosecutibe blocks */
		// check if consecutive with next block (if there is any next block)
		if (~((newBlockAddr + newBlockSize) < currAddr) & (currAddr > 0)) {
		    let newBlockSize = newBlockSize + currAddr[0];
			let newNextAddr = currAddr[1];
		}
		else {
		    let newNextAddr = currAddr;
		}
		
		// check if consecutive with previous block (if there is any previous block)
		if (~((prevAddr + prevAddr[0]) < newBlockAddr) & (prevAddr > heapBaseAddr)) {
		    let prevAddr[0] = prevAddr[0] + newBlockSize;
			let prevAddr[1] = newNextAddr;
			return;
		}

		/* from here the memory block is not consecutive to any other free block. */
		// if prevAddr is the base of the heap -> the object is the first free block.
		if (~(prevAddr > heapBaseAddr)) {
			let firstFreeAddress = newBlockAddr;
        }
		else {
		    let prevAddr[1] = newBlockAddr; // set reference to this block fromm the previous.
		}
		
		let newBlockAddr[0] = newBlockSize;
		let newBlockAddr[1] = newNextAddr;
		return;
    }    
}
