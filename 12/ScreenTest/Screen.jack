// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */

class Screen {

	// 256 rows X 32 columns
    static int screenBaseAddr;
	static int screenSize;
	static int cols;
	static int rows;
	static int rowLength;
	static int byteSize;
	
	static boolean currentColor;
	static boolean negativeColor;
	static boolean BLACK;
	static boolean WHITE;
	
	static Array oneBitValues;
	
    /** Initializes the Screen. */
    function void init() {
	    var int bitIndex;
		var int oneBitValue;
		
	    let screenBaseAddr = 16384;
		let rows = 256;
		let rowLength = 32;
		let screenSize = rows * rowLength;
		let byteSize = 16;
	
	    let BLACK = true;
	    let WHITE = false;
	    let currentColor = BLACK;
		let negativeColor = 1 - currentColor;
		
		let oneBitValues = Array.new(16);
		let bitIndex = 0;
		let oneBitValue = 1;
		while (bitIndex < byteSize) {
		    let oneBitValues[bitIndex] = oneBitValue;
			let oneBitValue = Math.multiply(oneBitValue, 2);
			let bitIndex = bitIndex + 1;
		}
		return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
	    var int currentAddr;
		var int bound;
		
		let currentAddr = screenBaseAddr;
		let bound = screenBaseAddr + screenSize;
		while (currentAddr < bound) {
		    do Memory.poke(currentAddr, WHITE);
			let currentAddr = currentAddr + 1;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
	    let currentColor = b;
		let negativeColor = 1 - currentColor;
		return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
	    var int byteCol;
	    var int position;
		var int bitIndex;
		var int valueWithOneBit;
		
		let byteCol = Math.divide(x, byteSize); // floor(x / 16)
		let position = Math.multiply(y, rowLength) + byteCol;
		if (~(position < screenSize)) {
		    return;
		}
		
		let bitIndex = x - Math.multiply(byteCol, byteSize);
		let valueWithOneBit = oneBitValues[bitIndex]; // BLACK
		if (currentColor) {
			let screenBaseAddr[position] = screenBaseAddr[position] | valueWithOneBit;
		}
		else {
		    let valueWithOneBit = ~valueWithOneBit; // WHITE
			let screenBaseAddr[position] = screenBaseAddr[position] & valueWithOneBit;
		}
		return;	    
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
	    var int dx;
		var int dy;
		var int a;
		var int b;
		var int signedA;
		var int signedB;
		var int xDir;
		var int yDir;
		var int xAdvance;
		var int yAdvance;
		
		let a = 0;
		let b = 0;
		
		let signedA = x1;
		let signedB = y1;
		
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		// determines x direction
		if (dx < 0) {
		    let xDir = -1;
		}
		else {
		    if (dx > 0) {
			    let xDir = 1;
			}
			else {
			    let xDir = 0;
				let a = Math.abs(dy);
			}
		}
		let dx = Math.abs(dx);
		
		// determines y direction
		if (dy < 0) {
		    let yDir = -1;
		}
		else {
		    if (dy > 0) {
			    let yDir = 1;
			}
			else {
			    let yDir = 0;
				let b = Math.abs(dx);
			}
		}
		let dy = Math.abs(dy);
		
		if (a > 0) {
		    let xAdvance = Math.max(x1, x2);
		}
		else {
		    let xAdvance = 0;
		}
		
		if (b > 0) {
		    let yAdvance = Math.max(y1, y2);
		}
		else {
		    let yAdvance = 0;
		}		
		
		// drawing pixels while advancing step by step.
		do Screen.drawPixel(signedA, signedB); 
		while ((a < dx) | (b < dy)) { // problem is that b is greater than dy. - sulution: find replacement for the dx dy.
		    if (xAdvance < yAdvance) {
			    let a = a + 1;
				let signedA = signedA + xDir;
				let xAdvance = xAdvance + dy;
			}
			else {
				let b = b + 1;
				let signedB = signedB + yDir;
			    let yAdvance = yAdvance + dx;
			}
			do Screen.drawPixel(signedA, signedB);
		}
		return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
	    var int height;
		
		let height = y1;
		/* draw and fill shape from top to bottom */
	    while (~(height > y2)) {
		    do Screen.drawLine(x1, height, x2, height);
			let height = height + 1;
		}
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
	    var int lowerBound;
		var int upperBound;
		var int squaredRadius;
		
		var int currentRow;
		var int dy;
		var int dySquared;
		var int xLeft;
		var int xRight;
		var int dx;
		
		let lowerBound = cy - r;
		let upperBound = cy + r;
		let squaredRadius = Math.multiply(r, r);
		
		let currentRow = lowerBound;
		while (~(currentRow > upperBound)) {
		    let dy = cy - currentRow;
			let dySquared = Math.multiply(dy, dy);
		    let dx = Math.sqrt(squaredRadius - dySquared);
		    let xLeft = cx - dx;
			let xRight = cx + dx;
			do Screen.drawLine(xLeft, currentRow, xRight, currentRow);
			let currentRow = currentRow + 1;
		}
		return;
    }
}
